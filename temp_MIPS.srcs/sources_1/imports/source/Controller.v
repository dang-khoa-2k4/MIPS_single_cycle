`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/15/2024 10:52:43 PM
// Design Name: 
// Module Name: Controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// decode the signal for other component base on opcode 
// ALUOp= 00 -> add
// ALUOp= 01-> sub
// ALUOp= 10-> Rtype
// ALUOp= 11-> itype 
// When addi i make it as add
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module Controller(
    input  [5:0] opcode,       // Opcode Ä‘áº§u vÃ o (Instruction [31:26])
    output reg RegDst,         // Chá»?n thanh ghi Ä‘Ã­ch
    output reg ALUSrc,         // Chá»?n nguá»“n cho ALU
    output reg MemRead,        // Cho phÃ©p Ä‘á»?c bá»™ nhá»›
    output reg MemtoReg,       // Chá»?n dá»¯ liá»‡u bá»™ nhá»› ghi vÃ o thanh ghi
    output reg MemWrite,       // Cho phÃ©p ghi bá»™ nhá»›
    output reg Branch_beq,      
    output reg RegWrite,       // Cho phÃ©p ghi thanh ghi
    output reg Jump,           // TÃ­n hiá»‡u cho lá»‡nh jump
    output reg [1:0] ALUOp,     // TÃ­n hiá»‡u Ä‘iá»?u khiá»ƒn ALU
    output reg Branch_bne,
    output reg LuiSig
);

always @(*) begin
            RegDst   = 0;
           ALUSrc   = 0;
           MemRead  = 0;
           MemtoReg = 0;
           MemWrite = 0;
           Branch_beq   = 0;
           Branch_bne   = 0;
           RegWrite = 0;
           Jump     = 0;
           LuiSig   = 0;
           ALUOp    = 2'b00;

    // Giáº£i mÃ£ opcode
    case (opcode)
        6'b000000: begin // R-Type: add, sub, and, or, nor, slt
            RegDst   = 1;
            ALUSrc   = 0;
            RegWrite = 1;
            ALUOp    = 2'b10; // DÃ¹ng funct Ä‘á»ƒ giáº£i mÃ£
        end
        6'b001000: begin // addi (Add Immediate)
            ALUSrc   = 1;
            RegWrite = 1;
            ALUOp    = 2'b00; // PhÃ©p cá»™ng
        end
        6'b100011: begin // lw (Load Word)
            ALUSrc   = 1;
            MemRead  = 1;
            MemtoReg = 1;
            RegWrite = 1;
            ALUOp    = 2'b00; // PhÃ©p cá»™ng Ä‘á»ƒ tÃ­nh Ä‘á»‹a chá»‰
        end
        6'b101011: begin // sw (Store Word)
            ALUSrc   = 1;
            MemWrite = 1;
            ALUOp    = 2'b00; // PhÃ©p cá»™ng Ä‘á»ƒ tÃ­nh Ä‘á»‹a chá»‰
        end
        6'b000100: begin // beq (Branch if Equal)
            ALUSrc          = 0;
            Branch_beq      = 1;
            ALUOp           = 2'b01; // PhÃ©p trá»« Ä‘á»ƒ so sÃ¡nh
        end
        // Chá»‰ vá»›i 2 biet ALUop khÃ´ng thá»ƒ truyá»?n Ä‘Æ°á»£c cÃ¡c lá»‡nh Ä‘áº§y Ä‘á»§ cÃ¡c lá»‡nh nhÆ° add, sub, and, or, slt nÃªn cáº§n truyá»?n OPcode vÃ o cáº£ ALUdecoder
        // Ä‘á»ƒ cÃ³ thá»ƒ nháº­n biáº¿t Ä‘Æ°á»£c
        6'b001100: begin // andi (AND Immediate)
            ALUSrc   = 1;
            RegWrite = 1;
            ALUOp    = 2'b11; // PhÃ©p AND 
        end
        6'b001101: begin // ori (OR Immediate)
            ALUSrc   = 1;
            RegWrite = 1;
            ALUOp    = 2'b11; // PhÃ©p OR
        end
        6'b001010: begin // slti (Set Less Than Immediate)
            ALUSrc   = 1;
            RegWrite = 1;
            ALUOp    = 2'b11; // PhÃ©p SLT
        end
        6'b000010: begin // j (Jump)
            Jump     = 1;
        end
        // bonus
        6'b000101: begin // bne (Branch if Not Equal)
            ALUSrc          = 0;
            Branch_bne      = 1;
            ALUOp           = 2'b01; // PhÃ©p trá»« Ä‘á»ƒ so sÃ¡nh
        end 
        6'b001111: begin // lui
            RegDst  = 0;
            LuiSig = 1;
            RegWrite = 1;
        end 
        default: begin
            // Máº·c Ä‘á»‹nh táº¥t cáº£ tÃ­n hiá»‡u lÃ  0
            RegDst   = 0;
            ALUSrc   = 0;
            MemRead  = 0;
            MemtoReg = 0;
            MemWrite = 0;
            Branch_beq   = 0;
            Branch_bne   = 0;
            RegWrite = 0;
            Jump     = 0;
            LuiSig   = 0;
            ALUOp    = 2'b00;
        end
    endcase
end

endmodule
